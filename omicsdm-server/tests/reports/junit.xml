<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="10" failures="92" skipped="0" tests="201" time="23.394" timestamp="2024-12-12T19:55:42.997765" hostname="pop-os"><testcase classname="test_auth.TestAuthClass" name="test_token" time="0.347" /><testcase classname="test_dataset.TestDatasetSubmissionValidation" name="test_dataset_get_submission_cols" time="0.488"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmissionValidation object at 0x7a599733f970&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_get_submission_cols(
        self, client, header_admin, header, project_fields
    ):
    
        project_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_dataset.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmissionValidation" name="test_dataset_submission_validation_success" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmissionValidation object at 0x7a59963abc40&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_submission_validation_success(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        # Validate the submission of multiple datasets
        # Make sure that in all the to be to the db added datasets
        # the dataset_id not already exists
    
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            add_to_db=False,
        )

tests/test_dataset.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmissionValidation" name="test_dataset_submission_validation_id_already_exists" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmissionValidation object at 0x7a59965ebc40&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_submission_validation_id_already_exists(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        # scenario:
        # make sure that it is impossible
        # to create a dataset with a duplicate id
        # (= because the dataset_id already exists for that group)
        # =&gt; meaning the combination of group_id and dataset_id must be unique
    
        dataset_id = str(uuid.uuid4())
    
        for error, add_to_db_bool in [
            (None, True),
            (f"{dataset_id} already exists", False),
        ]:
&gt;           add_dataset(
                client,
                header_admin,
                header,
                project_fields,
                dataset_fields,
                dataset_id=dataset_id,
                expected_error=error,
                add_to_db=add_to_db_bool,
            )

tests/test_dataset.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_get_dataset_submission_cols_options_for_diseases" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996507730&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_get_dataset_submission_cols_options_for_diseases(
        self,
        client,
        header_admin,
        header,
        project_fields,
    ):
    
        project_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_dataset.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_get_dataset_submission_cols_options_for_visibility" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a599675c850&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_get_dataset_submission_cols_options_for_visibility(
        self, client, header_admin, header, project_fields
    ):
    
        project_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_dataset.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_get_dataset_submission_cols_options_no_access_to_that_project" time="0.224"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a59965c4b80&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_4 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...JJCcjHAuxiWDa78r8zT7-h7l-EBApX2vSDdX-fIca7_XKnGLxCvR1Mtbp12bBw', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_get_dataset_submission_cols_options_no_access_to_that_project(
        self, client, header_4
    ):
    
        query = {"project_id": "test", "col_id": "visibility"}
    
        res = req_post(
            client, header_4, dataset_submission_cols_url_suffix, query
        )
    
&gt;       response = json.loads(res.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:230: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_get_dataset_submission_cols_options_for_visibility_changeable_T" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a59966d6800&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header_4 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...JJCcjHAuxiWDa78r8zT7-h7l-EBApX2vSDdX-fIca7_XKnGLxCvR1Mtbp12bBw', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_get_dataset_submission_cols_options_for_visibility_changeable_T(
        self, client, header_admin, header_4, project_fields
    ):
    
        # scenario:
        # get the visibility options for a dataset submission
        # when on the the project level the visibility changeable
    
        # create a project
        proj_id = str(uuid.uuid4())
    
        data = add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
            submit=False,
        )
    
        data["owners"] = "granada"
        data["datasetVisibilityChangeable"] = True
        data["datasetVisibilityDefault"] = "visible to all"
    
&gt;       res = req_post(
            client, header_admin, projects_create_url_suffix, [data]
        )

tests/test_dataset.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_get_dataset_submission_cols_options_for_visibility_changeable_F" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996269090&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header_4 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...JJCcjHAuxiWDa78r8zT7-h7l-EBApX2vSDdX-fIca7_XKnGLxCvR1Mtbp12bBw', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_get_dataset_submission_cols_options_for_visibility_changeable_F(
        self, client, header_admin, header_4, project_fields
    ):
    
        # scenario:
        # get the visibility options for a dataset submission
        # when on the the project level the visibility changeable
    
        # create a project
        proj_id = str(uuid.uuid4())
    
        data = add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
            submit=False,
        )
    
        data["owners"] = "granada"
        data["datasetVisibilityChangeable"] = False
        data["datasetVisibilityDefault"] = "visible to all"
    
&gt;       res = req_post(
            client, header_admin, projects_create_url_suffix, [data]
        )

tests/test_dataset.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...8nWkVznEcwKm3vK7VfR4weLLT-ssTnKVnKWgyRjEiQmk8p_qQc4tq0bqWbgI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create" time="0.282" /><testcase classname="test_dataset.TestDatasetSubmission" name="tests_datasets_create_w_data_policy_file" time="0.038"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996912860&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def tests_datasets_create_w_data_policy_file(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
&gt;       upload_data_policy_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:669: in upload_data_policy_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...l/3tr/fe0982e4-f26d-4099-b5fd-e5c8b43608fa/dataPolicy.pdf_uploadedVersion_1.tsv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="tests_datasets_create_w_data_policy_file_wrong_file_ext" time="0.030" /><testcase classname="test_dataset.TestDatasetSubmission" name="tests_datasets_create_w_multiple_data_policy_files" time="0.031" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_data_policy_file_finish_upload_group_not_exist" time="0.005"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_data_policy_file_finish_upload_wrong_group_name" time="0.036"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a599678e8c0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_datasets_create_w_data_policy_file_finish_upload_wrong_group_name(
        self, client, header, view_query
    ):
    
        # dummy query to add the user's group to the db
        req_post(client, header, dataset_view_url_suffix, view_query)
    
        # /finishUpload is called
        res2 = req_post(
            client,
            header,
            "datasets/policy/uploadfinish",
            {"aws_key": "cnag/test/dataPolicy/dataPolicy.txt"},
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))

tests/test_dataset.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_data_policy_file_finish_upload_ds_not_exist" time="0.022"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996169f00&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_datasets_create_w_data_policy_file_finish_upload_ds_not_exist(
        self, client, header, view_query
    ):
    
        # dummy query to add the user's group to the db
        req_post(client, header, dataset_view_url_suffix, view_query)
    
        # /finishUpload is called
        res2 = req_post(
            client,
            header,
            "datasets/policy/uploadfinish",
            {"aws_key": "3tr/test/dataPolicy/dataPolicy.txt"},
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))

tests/test_dataset.py:454: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_create_dataset_w_clinical_data" time="0.038"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a599678dde0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_create_dataset_w_clinical_data(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        # TODO
        # the clinical data tests are the same as the data policy tests
        # so it would be good to refactor them into a single function (class?)
    
&gt;       upload_clinical_data_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:465: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:714: in upload_clinical_data_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...devel3tropal/3tr/6721a8bb-7a7f-4b35-b3de-2ce0e2d69337/clinical/clinicalData.csv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="tests_datasets_create_w_clinical_data_file_wrong_file_ext" time="0.030"><failure message="AssertionError: The clinical file must be .csv or .json">client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
proj_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
ds_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_id = '10012d0a-97b3-4f34-bb1e-e01673d07931'
project_id = '1ceab892-3646-4af4-9432-5e7b23d7428b', private = True, submit = True, overwrite_fields = {'file2': ['test.pdf']}, create_project = True
proj_overwrite_fields = None, expected_error = 'The clinical data file must be in .csv format', add_to_db = True, field_to_be_deleted = None

    def add_dataset(
        client,
        header_admin,
        header,
        proj_fields,
        ds_fields,
        dataset_id=None,
        project_id=None,
        private=True,
        submit=True,
        overwrite_fields=None,
        create_project=True,
        proj_overwrite_fields=None,
        expected_error=None,
        add_to_db=True,
        field_to_be_deleted=None,
    ):
        """
        Before being able to create a dataset
        a project has to be created
        """
    
        if project_id is None:
            project_id = str(uuid.uuid4())
    
        # TODO
        # pass owner information to add_project
    
        if create_project:
            add_project(
                client,
                header_admin,
                project_id,
                proj_fields,
                "projects/create",
                submit=True,
                overwrite_fields=proj_overwrite_fields,
            )
    
        if dataset_id is None:
            dataset_id = str(uuid.uuid4())
    
        d = {"disease": "CD", "visibility": "private"}
    
        row = {k: d.get(k, "test") for k in ds_fields}
        row.update(
            {
                "project_id": project_id,
                "id": dataset_id,
                "samplesCount": "1",
                "featuresCount": "1",
                # TODO
                # fix wrong spelling
                "healthyControllsIncluded": True,
                "visibility": "private" if private else "visible to all",
                "file": [],
                "file2": [],
            }
        )
    
        if field_to_be_deleted is not None:
            del row[field_to_be_deleted]
    
        if overwrite_fields:
            row.update(overwrite_fields)
    
        if not submit:
            return row
    
        url = "datasets/create"
    
        if add_to_db is False:
            url = "datasets/validate"
            row = [row]
    
        # TODO
        # in a function
        # because it is the same logic for
        # add_project and add_file
        res = req_post(
            client,
            header,
            url,
            row,
        )
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
&gt;               assert expected_error in res["message"]
E               AssertionError

tests/helpers/utils.py:470: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996028be0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def tests_datasets_create_w_clinical_data_file_wrong_file_ext(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        dataset_id = str(uuid.uuid4())
        project_id = str(uuid.uuid4())
    
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            dataset_id=dataset_id,
            project_id=project_id,
            overwrite_fields={"file2": ["test.pdf"]},
            expected_error=("The clinical data file must be in .csv format"),
        )

tests/test_dataset.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
proj_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
ds_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_id = '10012d0a-97b3-4f34-bb1e-e01673d07931'
project_id = '1ceab892-3646-4af4-9432-5e7b23d7428b', private = True, submit = True, overwrite_fields = {'file2': ['test.pdf']}, create_project = True
proj_overwrite_fields = None, expected_error = 'The clinical data file must be in .csv format', add_to_db = True, field_to_be_deleted = None

    def add_dataset(
        client,
        header_admin,
        header,
        proj_fields,
        ds_fields,
        dataset_id=None,
        project_id=None,
        private=True,
        submit=True,
        overwrite_fields=None,
        create_project=True,
        proj_overwrite_fields=None,
        expected_error=None,
        add_to_db=True,
        field_to_be_deleted=None,
    ):
        """
        Before being able to create a dataset
        a project has to be created
        """
    
        if project_id is None:
            project_id = str(uuid.uuid4())
    
        # TODO
        # pass owner information to add_project
    
        if create_project:
            add_project(
                client,
                header_admin,
                project_id,
                proj_fields,
                "projects/create",
                submit=True,
                overwrite_fields=proj_overwrite_fields,
            )
    
        if dataset_id is None:
            dataset_id = str(uuid.uuid4())
    
        d = {"disease": "CD", "visibility": "private"}
    
        row = {k: d.get(k, "test") for k in ds_fields}
        row.update(
            {
                "project_id": project_id,
                "id": dataset_id,
                "samplesCount": "1",
                "featuresCount": "1",
                # TODO
                # fix wrong spelling
                "healthyControllsIncluded": True,
                "visibility": "private" if private else "visible to all",
                "file": [],
                "file2": [],
            }
        )
    
        if field_to_be_deleted is not None:
            del row[field_to_be_deleted]
    
        if overwrite_fields:
            row.update(overwrite_fields)
    
        if not submit:
            return row
    
        url = "datasets/create"
    
        if add_to_db is False:
            url = "datasets/validate"
            row = [row]
    
        # TODO
        # in a function
        # because it is the same logic for
        # add_project and add_file
        res = req_post(
            client,
            header,
            url,
            row,
        )
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
                assert expected_error in res["message"]
                return
            except AssertionError:
&gt;               raise AssertionError(res["message"])
E               AssertionError: The clinical file must be .csv or .json

tests/helpers/utils.py:473: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="tests_datasets_w_multiple_clinical_data_files" time="0.030" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_clinical_data_finish_upload_group_not_exist" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_clinical_data_finish_upload_wrong_group_name" time="0.025"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a59966d6f80&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_datasets_create_w_clinical_data_finish_upload_wrong_group_name(
        self, client, header, view_query
    ):
    
        # dummy query to add the user's group to the db
        req_post(client, header, dataset_view_url_suffix, view_query)
    
        # /finishUpload is called
        res2 = req_post(
            client,
            header,
            "datasets/clinical/uploadfinish",
            {"aws_key": "cnag/test/dataPolicy/clinical.csv"},
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))

tests/test_dataset.py:539: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_w_clinical_data_file_finish_upload_ds_not_exist" time="0.026"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a5996535c00&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_datasets_create_w_clinical_data_file_finish_upload_ds_not_exist(
        self, client, header, view_query
    ):
    
        # dummy query to add the user's group to the db
        req_post(client, header, dataset_view_url_suffix, view_query)
    
        # /finishUpload is called
        res2 = req_post(
            client,
            header,
            "datasets/clinical/uploadfinish",
            {"aws_key": "3tr/test/clinicalData/clinical.csv"},
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))

tests/test_dataset.py:557: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_wrong_fields" time="0.032" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_field_has_wrong_enums" time="0.031" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_field_has_wrong_type" time="0.032" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_missing_dataset_id" time="0.021" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_id_empty" time="0.021" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_field_is_missing" time="0.535" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_mandatory_field_contains_empty_string" time="0.031"><failure message="AssertionError: '' should be non-empty">client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
proj_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
ds_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_id = '14c11115-88d7-418c-89ad-31a3b431fa22'
project_id = '20378a39-6857-4764-852a-d882fbfaee01', private = True, submit = True, overwrite_fields = {'treatment': ''}, create_project = True
proj_overwrite_fields = None, expected_error = 'At least one required field is empty/unselected', add_to_db = True, field_to_be_deleted = None

    def add_dataset(
        client,
        header_admin,
        header,
        proj_fields,
        ds_fields,
        dataset_id=None,
        project_id=None,
        private=True,
        submit=True,
        overwrite_fields=None,
        create_project=True,
        proj_overwrite_fields=None,
        expected_error=None,
        add_to_db=True,
        field_to_be_deleted=None,
    ):
        """
        Before being able to create a dataset
        a project has to be created
        """
    
        if project_id is None:
            project_id = str(uuid.uuid4())
    
        # TODO
        # pass owner information to add_project
    
        if create_project:
            add_project(
                client,
                header_admin,
                project_id,
                proj_fields,
                "projects/create",
                submit=True,
                overwrite_fields=proj_overwrite_fields,
            )
    
        if dataset_id is None:
            dataset_id = str(uuid.uuid4())
    
        d = {"disease": "CD", "visibility": "private"}
    
        row = {k: d.get(k, "test") for k in ds_fields}
        row.update(
            {
                "project_id": project_id,
                "id": dataset_id,
                "samplesCount": "1",
                "featuresCount": "1",
                # TODO
                # fix wrong spelling
                "healthyControllsIncluded": True,
                "visibility": "private" if private else "visible to all",
                "file": [],
                "file2": [],
            }
        )
    
        if field_to_be_deleted is not None:
            del row[field_to_be_deleted]
    
        if overwrite_fields:
            row.update(overwrite_fields)
    
        if not submit:
            return row
    
        url = "datasets/create"
    
        if add_to_db is False:
            url = "datasets/validate"
            row = [row]
    
        # TODO
        # in a function
        # because it is the same logic for
        # add_project and add_file
        res = req_post(
            client,
            header,
            url,
            row,
        )
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
&gt;               assert expected_error in res["message"]
E               AssertionError

tests/helpers/utils.py:470: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_dataset.TestDatasetSubmission object at 0x7a599690cbe0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
datasets_fields_mandatory_and_string = ['treatment', 'molecularInfo', 'sampleType', 'dataType', 'valueType', 'platform', ...]

    def test_datasets_create_mandatory_field_contains_empty_string(
        self,
        client,
        header_admin,
        header,
        project_fields,
        dataset_fields,
        datasets_fields_mandatory_and_string,
    ):
    
        expected_err = "At least one required field is empty/unselected"
    
        for field in ["id", "project_id"]:
            datasets_fields_mandatory_and_string.remove(field)
    
        for field in datasets_fields_mandatory_and_string:
&gt;           add_dataset(
                client,
                header_admin,
                header,
                project_fields,
                dataset_fields,
                overwrite_fields={field: ""},
                expected_error=expected_err,
            )

tests/test_dataset.py:675: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
proj_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
ds_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_id = '14c11115-88d7-418c-89ad-31a3b431fa22'
project_id = '20378a39-6857-4764-852a-d882fbfaee01', private = True, submit = True, overwrite_fields = {'treatment': ''}, create_project = True
proj_overwrite_fields = None, expected_error = 'At least one required field is empty/unselected', add_to_db = True, field_to_be_deleted = None

    def add_dataset(
        client,
        header_admin,
        header,
        proj_fields,
        ds_fields,
        dataset_id=None,
        project_id=None,
        private=True,
        submit=True,
        overwrite_fields=None,
        create_project=True,
        proj_overwrite_fields=None,
        expected_error=None,
        add_to_db=True,
        field_to_be_deleted=None,
    ):
        """
        Before being able to create a dataset
        a project has to be created
        """
    
        if project_id is None:
            project_id = str(uuid.uuid4())
    
        # TODO
        # pass owner information to add_project
    
        if create_project:
            add_project(
                client,
                header_admin,
                project_id,
                proj_fields,
                "projects/create",
                submit=True,
                overwrite_fields=proj_overwrite_fields,
            )
    
        if dataset_id is None:
            dataset_id = str(uuid.uuid4())
    
        d = {"disease": "CD", "visibility": "private"}
    
        row = {k: d.get(k, "test") for k in ds_fields}
        row.update(
            {
                "project_id": project_id,
                "id": dataset_id,
                "samplesCount": "1",
                "featuresCount": "1",
                # TODO
                # fix wrong spelling
                "healthyControllsIncluded": True,
                "visibility": "private" if private else "visible to all",
                "file": [],
                "file2": [],
            }
        )
    
        if field_to_be_deleted is not None:
            del row[field_to_be_deleted]
    
        if overwrite_fields:
            row.update(overwrite_fields)
    
        if not submit:
            return row
    
        url = "datasets/create"
    
        if add_to_db is False:
            url = "datasets/validate"
            row = [row]
    
        # TODO
        # in a function
        # because it is the same logic for
        # add_project and add_file
        res = req_post(
            client,
            header,
            url,
            row,
        )
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
                assert expected_error in res["message"]
                return
            except AssertionError:
&gt;               raise AssertionError(res["message"])
E               AssertionError: '' should be non-empty

tests/helpers/utils.py:473: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetSubmission" name="test_datasets_create_project_not_exist" time="0.007" /><testcase classname="test_dataset.TestDatasetSubmission" name="test_dataset_already_exist" time="0.070" /><testcase classname="test_dataset.TestDatasetList" name="test_datasets_list" time="0.066" /><testcase classname="test_dataset.TestDatasetList" name="test_datasets_list_filter" time="0.064" /><testcase classname="test_dataset.TestDatasetList" name="test_datasets_list_filter_project_not_exist" time="0.063" /><testcase classname="test_dataset.TestDatasetList" name="test_datasets_list_group_not_exist" time="0.220"><failure message="AttributeError: 'dict' object has no attribute 'status_code'">self = &lt;tests.test_dataset.TestDatasetList object at 0x7a5996556a40&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_datasets_list_group_not_exist(self, client, header_3):
    
        data = {"dataset_id": ""}
        res = req_post(client, header_3, "datasets/list", data)
&gt;       assert 404 == res.status_code
E       AttributeError: 'dict' object has no attribute 'status_code'

tests/test_dataset.py:812: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_get_datasets_view_cols" time="0.005" /><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view" time="0.133" /><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_group_not_yet_exist" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_wrong_keys" time="0.009" /><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_show_data_policy_file_url" time="0.095"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetView object at 0x7a5996505b10&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_datasets_view_show_data_policy_file_url(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        # scenario:
        # create a dataset with a data policy file attached
        # and then check that the data policy file url is returned
        # and visible in the dataset view
    
&gt;       ds_id, aws_key = upload_data_policy_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:923: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:669: in upload_data_policy_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...l/3tr/08af49bd-52c4-48d5-9842-31dd0789b105/dataPolicy.pdf_uploadedVersion_1.tsv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_regenerate_data_policy_file_url" time="0.039"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetView object at 0x7a599655dea0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
db_uri = 'postgresql://postgres:password@10.10.0.2/postgres'

    def test_datasets_view_regenerate_data_policy_file_url(
        self,
        client,
        header_admin,
        header,
        dataset_fields,
        project_fields,
        db_uri,
    ):
    
        # scenario:
        # modify the presigned url to be expired and then regenerate it
    
&gt;       ds_id, aws_key = upload_data_policy_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:955: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:669: in upload_data_policy_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...l/3tr/5da7d000-9fa7-4e2b-b51a-96bb5663a433/dataPolicy.pdf_uploadedVersion_1.tsv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_show_clinical_data_file_url" time="0.039"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetView object at 0x7a599644c0d0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_datasets_view_show_clinical_data_file_url(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        # scenario:
        # create a dataset with a clinical file attached
        # and then check that the clinica data file url is returned
        # and visible in the dataset view
    
&gt;       ds_id, aws_key = upload_clinical_data_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:714: in upload_clinical_data_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...devel3tropal/3tr/3ab83574-56e1-4317-aad8-b33d4154d3d3/clinical/clinicalData.csv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_datasets_view_regenerate_clinical_data_file_url" time="0.039"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.test_dataset.TestDatasetView object at 0x7a59962a6fe0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
db_uri = 'postgresql://postgres:password@10.10.0.2/postgres'

    def test_datasets_view_regenerate_clinical_data_file_url(
        self,
        client,
        header_admin,
        header,
        dataset_fields,
        project_fields,
        db_uri,
    ):
    
        # scenario:
        # modify the presigned url to be expired and then regenerate it
    
&gt;       ds_id, aws_key = upload_clinical_data_file(
            client, header_admin, header, project_fields, dataset_fields
        )

tests/test_dataset.py:1046: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:714: in upload_clinical_data_file
    sign_url(
tests/helpers/utils.py:541: in sign_url
    res = req_get(client, header, url)
tests/helpers/utils.py:34: in inner_function
    return json.loads(res.data.decode("utf8"))
/usr/lib/python3.10/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.10/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x7a599d7681c0&gt;
s = '&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n&lt;p&gt;You should be redirected ...devel3tropal/3tr/f09179aa-2ab8-499c-9521-51cf4a222421/clinical/clinicalData.csv?uploads&lt;/a&gt;. If not, click the link.\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_dataset_sort" time="0.203" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_sort_by_owner" time="0.209" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_sort_by_extra_column_disease" time="0.221" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_sort_wrong_keys" time="0.012" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_sort_col_not_exist" time="0.013" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_full_match" time="0.140" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_owner" time="0.133"><failure message="AssertionError">self = &lt;tests.test_dataset.TestDatasetView object at 0x7a59964c3340&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...NcOSUOK9lkXt-8akhUhUC_i6Mp40jG6OKpLw8-eYG1aj61e-ik1nHJjrwzpBCw', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_filter_by_owner(
        self,
        client,
        header_admin,
        header,
        header_2,
        view_query,
        project_fields,
        dataset_fields,
    ):
    
        val = "cnag"
        col = "owner"
    
&gt;       filter_by(
            col,
            val,
            client,
            header_admin,
            header,
            header_2,
            project_fields,
            dataset_fields,
            dataset_view_url_suffix,
        )

tests/test_dataset.py:1388: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

col = 'owner', val = 'cnag', client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...NcOSUOK9lkXt-8akhUhUC_i6Mp40jG6OKpLw8-eYG1aj61e-ik1nHJjrwzpBCw', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_view_url_suffix = 'datasets/all', dataset_ids = []
project_ids = [], dataset_private = [], create_dataset = True, partial_match = False, expected_error = None, overwrite_fields = None

    def filter_by(
        col,
        val,
        client,
        header_admin,
        header,
        header_2,
        project_fields,
        dataset_fields,
        dataset_view_url_suffix,
        dataset_ids=[],
        project_ids=[],
        dataset_private=[],
        create_dataset=True,
        partial_match=False,
        expected_error=None,
        overwrite_fields=None,
    ):
    
        query = [{"id": col, "value": val}]
    
        if create_dataset:
            i = 0
            for head in [header, header_2]:
    
                project_id = str(uuid.uuid4())
                dataset_id = str(uuid.uuid4())
                private = False
                overwrite = None
    
                if dataset_ids:
                    dataset_id = dataset_ids[i]
    
                if project_ids:
                    project_id = project_ids[i]
    
                if dataset_private:
                    private = dataset_private[i]
    
                if overwrite_fields is not None:
                    overwrite = overwrite_fields[i]
    
                add_dataset(
                    client,
                    header_admin,
                    head,
                    project_fields,
                    dataset_fields,
                    project_id=project_id,
                    dataset_id=dataset_id,
                    private=private,
                    overwrite_fields=overwrite,
                )
                i += 1
    
        # before filtering
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
        )
    
        response = json.loads(res.data.decode("utf8"))
        assert len(response["items"]) &gt; 0
        all_items = [item[col] for item in response["items"]]
        assert len(response["items"]) &gt; 1
        assert len(set(all_items)) &gt; 0
    
        # filtering
        if col == "owner":
            query = [{"id": "checkbox", "value": val}]
    
        res2 = filter_view(client, header, dataset_view_url_suffix, query)
    
        if expected_error:
            assert expected_error in res2["message"]
            return
    
        response2 = json.loads(res2.data.decode("utf8"))
&gt;       assert len(response2["items"]) &gt; 0
E       AssertionError

tests/helpers/utils.py:821: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_project_id" time="0.138" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_visibility_only_private" time="0.171" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_wrong_keys" time="0.011" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_col_not_exist" time="0.012" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_query_not_a_list" time="0.010" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_submit_date" time="0.204" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_submit_date_time" time="2.184" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_submit_date_wrong_format" time="0.149" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_extra_cols_disease" time="0.158" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_extra_cols_controls_included" time="0.162" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_dataset_name" time="0.162" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_by_extra_cols_samples_count" time="0.161" /><testcase classname="test_dataset.TestDatasetView" name="test_dataset_filter_value_type_mismatch" time="0.319" /><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_put_arg_not_exist" time="0.005" /><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_group_not_exist" time="0.007"><failure message="AssertionError: assert 'group not found' in 'project not found'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599635b970&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_dataset_share_group_not_exist(self, client, header_3):
    
        group = "crg"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        res = req_put(
            client,
            header_3,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
    
        response = json.loads(res.data.decode("utf8"))
    
        assert 404 == res.status_code
&gt;       assert "group not found" in response["message"]
E       AssertionError: assert 'group not found' in 'project not found'

tests/test_dataset.py:1833: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_group_not_valid" time="0.047"><failure message="assert 405 == 403">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599675da80&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_share_group_not_valid(
        self, client, header_admin, header, project_fields, dataset_fields
    ):
    
        group = "embl"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        response = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
    
&gt;       assert 405 == response["status_code"]
E       assert 405 == 403

tests/test_dataset.py:1865: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_with_one_group" time="0.069"><failure message="assert 0 == 1">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599675f610&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_share_with_one_group(
        self,
        client,
        header_admin,
        header,
        header_3,
        project_fields,
        dataset_fields,
    ):
    
        # ! FIXME
        # fails when all test are executed at the same time
    
        # TODO
        # get the group id from the header_3 by decoding the token
        group = "crg"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        # before sharing
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
            [{"id": "dataset_id", "value": dataset_id}],
        )
        response = json.loads(res.data.decode("utf8"))
        assert 1 == response["_meta"]["total_items"]
        assert response["items"][0]["isUserOwner"]
    
        res2 = filter_view(
            client,
            header_3,
            dataset_view_url_suffix,
            [{"id": "dataset_id", "value": dataset_id}],
        )
        response2 = json.loads(res2.data.decode("utf8"))
&gt;       assert 0 == response2["_meta"]["total_items"]
E       assert 0 == 1

tests/test_dataset.py:1916: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_group_not_exist_yet" time="0.045"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599692d3c0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_4 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...JJCcjHAuxiWDa78r8zT7-h7l-EBApX2vSDdX-fIca7_XKnGLxCvR1Mtbp12bBw', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_share_group_not_exist_yet(
        self,
        client,
        header_admin,
        header,
        header_4,
        project_fields,
        dataset_fields,
    ):
    
        # TODO
        # get the group id from the header_4 by decoding the token
        group = "granada"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res2 = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
&gt;       response2 = json.loads(res2.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:1995: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_user_not_owner" time="0.236"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59962a5960&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_share_user_not_owner(
        self,
        client,
        header_admin,
        header,
        header_3,
        view_query,
        project_fields,
        dataset_fields,
    ):
        # header_3 (crg) tries to share a dataset with header_2(cnag)
        # although header(3tr) is the owner of the dataset
    
        group = "cnag"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
            None,
        )
        response = json.loads(res.data.decode("utf8"))
        assert dataset_id in [item["dataset_id"] for item in response["items"]]
    
        res2 = filter_view(
            client,
            header_3,
            dataset_view_url_suffix,
            None,
        )
        response2 = json.loads(res2.data.decode("utf8"))
        assert "items" in response2
    
        res3 = req_put(
            client,
            header_3,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
&gt;       response3 = json.loads(res3.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2069: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_unshare_user_not_owner" time="0.239"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599685a4a0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_unshare_user_not_owner(
        self,
        client,
        header_admin,
        header,
        header_3,
        project_fields,
        dataset_fields,
    ):
        # header_3 (crg) tries to unshare a dataset with header_2(cnag)
        # although header(3tr) is the owner of the dataset
    
        group = "cnag"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res = filter_view(client, header, dataset_view_url_suffix)
        response = json.loads(res.data.decode("utf8"))
        assert dataset_id in [item["dataset_id"] for item in response["items"]]
    
        res2 = filter_view(client, header_3, dataset_view_url_suffix)
        response2 = json.loads(res2.data.decode("utf8"))
        assert "items" in response2
    
        res3 = req_put(
            client,
            header_3,
            dataset_remove_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
&gt;       response3 = json.loads(res3.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2117: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_same_dataset_id" time="0.060"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59962a4970&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...NcOSUOK9lkXt-8akhUhUC_i6Mp40jG6OKpLw8-eYG1aj61e-ik1nHJjrwzpBCw', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_3 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...SUzabW2Rz9e_HMEztaEd7zk5k8l2j6HoNCW7eQ4IhZpsVnTo3L_XyebEJvCNbg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_share_same_dataset_id(
        self,
        client,
        header_admin,
        header,
        header_2,
        header_3,
        project_fields,
        dataset_fields,
    ):
    
        # scenario
        # user1 (3tr) has uploaded a dataset w/ a random id"
        # user2 (cnag) has uploaded a dataset w/ the same id
        # user1 (3tr) has shared the dataset with user2 (cnag)
        # user2 (cnag) wants to share the dataset with ALL users
    
        # expected
        # The dataset of user1 should be only shared with user2
        # The dataset of user2 should be shared with ALL users
        # user3 should be a able to see the dataset of user2
        # but not the one of user1
    
        dataset_id = str(uuid.uuid4())
    
        for head, group in [(header, "cnag"), (header_2, "ALL")]:
            project_id = str(uuid.uuid4())
    
            add_dataset(
                client,
                header_admin,
                head,
                project_fields,
                dataset_fields,
                project_id=project_id,
                dataset_id=dataset_id,
            )
    
            res = filter_view(
                client,
                header,
                dataset_view_url_suffix,
                [{"id": "dataset_id", "value": dataset_id}],
            )
    
            response = json.loads(res.data.decode("utf8"))
            assert group not in response["items"][0]["shared_with"]
            assert "private" == response["items"][0]["visibility"]
    
            res2 = req_put(
                client,
                head,
                dataset_add_group_url_suffix,
                [
                    f"project={project_id}",
                    f"dataset={dataset_id}",
                    f"group={group}",
                ],
            )
    
&gt;           response2 = json.loads(res2.data.decode("utf8"))
E           AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2180: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_unshare_same_dataset_id" time="0.063"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599692d030&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...NcOSUOK9lkXt-8akhUhUC_i6Mp40jG6OKpLw8-eYG1aj61e-ik1nHJjrwzpBCw', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_unshare_same_dataset_id(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
    
        # scenario
    
        # preparation
        # user1 (3tr) has uploaded a dataset w/ a random id"
        # user2 (cnag) has uploaded a dataset w/ the same id
        # user1 (3tr) has shared the dataset with user2 (cnag)
        # user2 (cnag) wants to share the dataset with ALL users
    
        # test
        # user1 (3tr) wants to unshare the dataset with user2 (cnag)
        # user2 (cnag) wants to unshare the dataset with ALL users
    
        # expected
        # The dataset of user1 should be unshared with user2 (cnag)
        # The dataset of user2 should be unshared with ALL users
    
        dataset_id = str(uuid.uuid4())
        project_ids = []
    
        for head, group in [(header, "cnag"), (header_2, "ALL")]:
            project_id = str(uuid.uuid4())
            project_ids.append(project_id)
    
            add_dataset(
                client,
                header_admin,
                head,
                project_fields,
                dataset_fields,
                project_id=project_id,
                dataset_id=dataset_id,
            )
    
            res = filter_view(
                client,
                header,
                dataset_view_url_suffix,
                [{"id": "dataset_id", "value": dataset_id}],
            )
    
            response = json.loads(res.data.decode("utf8"))
            assert group not in response["items"][0]["shared_with"]
    
            res2 = req_put(
                client,
                head,
                dataset_add_group_url_suffix,
                [
                    f"project={project_id}",
                    f"dataset={dataset_id}",
                    f"group={group}",
                ],
            )
    
&gt;           response2 = json.loads(res2.data.decode("utf8"))
E           AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2275: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_unshare_owner" time="0.066"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59961da1a0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_dataset_unshare_owner(
        self, client, header_admin, header, project_fields, dataset_fields
    ):
    
        # Make sure that you cannot unshare
        # if the users's kc group is owner
    
        group = "3tr"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res = req_put(
            client,
            header,
            dataset_remove_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
&gt;       response = json.loads(res.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2352: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_dataset_not_exist" time="0.035"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59967cf610&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_share_dataset_not_exist(
        self, client, header_admin, header, project_fields
    ):
    
        group = "cnag"
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            projects_create_url_suffix,
        )
    
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
            [{"id": "dataset_id", "value": dataset_id}],
        )
    
        response = json.loads(res.data.decode("utf8"))
        assert 0 == len(response["items"])
    
        res = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
&gt;       response = json.loads(res.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2392: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_project_not_exist" time="0.019" /><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_shared_with_group_not_yet_in_db" time="0.001"><failure message="sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM public.group ...' should be explicitly declared as text('DELETE FROM public.group ...')">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59961d86a0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
db_uri = 'postgresql://postgres:password@10.10.0.2/postgres'

    def test_dataset_shared_with_group_not_yet_in_db(
        self,
        client,
        header_admin,
        header,
        dataset_fields,
        project_fields,
        db_uri,
    ):
    
        # scenario:
        # share with a group that is not yet in the db
    
        # test only works if group5 is not in the database
        cmd = "DELETE FROM public.group WHERE kc_groupname='group5'"
&gt;       del_from_db(db_uri, cmd)

tests/test_dataset.py:2444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:103: in del_from_db
    session.execute(cmd)
venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2362: in execute
    return self._execute_internal(
venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2145: in _execute_internal
    statement = coercions.expect(roles.StatementRole, statement)
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:395: in expect
    resolved = impl._literal_coercion(
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:621: in _literal_coercion
    return self._text_coercion(element, argname, **kw)
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:614: in _text_coercion
    return _no_text_coercion(element, argname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

element = "DELETE FROM public.group WHERE kc_groupname='group5'", argname = None, exc_cls = &lt;class 'sqlalchemy.exc.ArgumentError'&gt;, extra = None, err = None

    def _no_text_coercion(
        element: Any,
        argname: Optional[str] = None,
        exc_cls: Type[exc.SQLAlchemyError] = exc.ArgumentError,
        extra: Optional[str] = None,
        err: Optional[Exception] = None,
    ) -&gt; NoReturn:
&gt;       raise exc_cls(
            "%(extra)sTextual SQL expression %(expr)r %(argname)sshould be "
            "explicitly declared as text(%(expr)r)"
            % {
                "expr": util.ellipses_string(element),
                "argname": "for argument %s" % (argname,) if argname else "",
                "extra": "%s " % extra if extra else "",
            }
        ) from err
E       sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM public.group ...' should be explicitly declared as text('DELETE FROM public.group ...')

venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:584: ArgumentError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_already_shared_with_group" time="0.059"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a59965eb4c0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_already_shared_with_group(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
        # when the dataset is already shared with the group
        # it should just continue the loop and not raise an error
    
        group = "cnag"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
            [{"id": "dataset_id", "value": dataset_id}],
        )
    
        response = json.loads(res.data.decode("utf8"))
        assert group not in response["items"][0]["shared_with"]
        assert "private" == response["items"][0]["visibility"]
    
        res2 = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2553: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_unshare_group_not_in_shared_with" time="0.058"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_dataset.TestDatasetShare object at 0x7a599601c3a0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_unshare_group_not_in_shared_with(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
        # scenario:
        # when the group is not in the shared_with list
        # it should just continue the loop and not raise an error
    
        group = "cnag"
        group2 = "group5"
    
        project_id = str(uuid.uuid4())
        dataset_id = str(uuid.uuid4())
    
        add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            project_id=project_id,
            dataset_id=dataset_id,
        )
    
        res = filter_view(
            client,
            header,
            dataset_view_url_suffix,
            [{"id": "dataset_id", "value": dataset_id}],
        )
    
        response = json.loads(res.data.decode("utf8"))
        assert group not in response["items"][0]["shared_with"]
        assert "private" == response["items"][0]["visibility"]
    
        res2 = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={group}",
            ],
        )
    
&gt;       response2 = json.loads(res2.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_dataset.py:2625: AttributeError</failure></testcase><testcase classname="test_dataset.TestDatasetShare" name="test_dataset_share_dataset_visibility_changeable_false" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_dataset.TestDatasetAdminView" name="test_file_admin_view_user_not_admin" time="0.006" /><testcase classname="test_dataset.TestDatasetAdminView" name="test_dataset_admin_view" time="0.143" /><testcase classname="test_dataset.TestDatasetAdminView" name="test_dataset_admin_view_wrong_schema" time="0.042" /><testcase classname="test_dataset.TestDatasetAdminView" name="test_dataset_admin_view_filter_by_dataset_id" time="0.051" /><testcase classname="test_dataset.TestDatasetAdminView" name="test_dataset_admin_view_filter_by_project_id" time="0.049" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_datasets_admin_get_cols" time="0.004"><failure message="KeyError: 0">self = &lt;tests.test_dataset.TestDatasetAdminMode object at 0x7a599679eb30&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...gI9z54c8y7csBFk3Nvo0eqyjxkFDOYKMCjzEym83yB9FzcUXPKxy4L9q8p1A', 'Content-Type': 'application/json', 'groups': ['admin']}

    def test_datasets_admin_get_cols(self, client, header_admin):
    
        # TODO
        # figure out why that is a post request
        res = req_post(client, header_admin, "datasets/adminviewcols", {})
        response = json.loads(res.data.decode("utf8"))
    
&gt;       assert "headers" in response[0]
E       KeyError: 0

tests/test_dataset.py:2897: KeyError</failure></testcase><testcase classname="test_dataset.TestDatasetAdminMode" name="test_datasets_admin_get_cols_not_admin" time="0.005"><failure message="AssertionError: assert 'endpoint only for admins' == 'The method i...equested URL.'&#10;  - The method is not allowed for the requested URL.&#10;  + endpoint only for admins">self = &lt;tests.test_dataset.TestDatasetAdminMode object at 0x7a599601f130&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...cUXtOjOrFzbxAa5Efszm_LIr0fd-WLKaS3admK2MHWqSn5YQ9KGYgwEEmSsi6Q', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_datasets_admin_get_cols_not_admin(self, client, header):
    
        # TODO
        # figure out why that is a post request
        res = req_post(client, header, "datasets/adminviewcols", {})
        response = json.loads(res.data.decode("utf8"))
    
&gt;       assert "endpoint only for admins" == response["message"]
E       AssertionError: assert 'endpoint only for admins' == 'The method i...equested URL.'
E         - The method is not allowed for the requested URL.
E         + endpoint only for admins

tests/test_dataset.py:2907: AssertionError</failure></testcase><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_user_not_admin" time="0.005" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_dataset_not_found" time="0.009" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_wrong_schema_count_col_is_not_int" time="0.009" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_wrong_schema_controls_included_wrong_enums" time="0.009" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_wrong_schema_visibility_wrong_enums" time="0.008" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_update_name" time="0.075" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_mode_update_tags" time="0.071" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_update_disease" time="0.071" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_update_disease_new_val_not_allowed_for_that_project" time="0.056" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_update_visibility_to_private" time="0.072" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_update_visibility_to_visible_to_all" time="0.071" /><testcase classname="test_dataset.TestDatasetAdminMode" name="test_dataset_admin_update_visibility_cannot_change_visibility" time="0.080" /><testcase classname="test_file.TestFileUpload" name="test_get_file_submission_cols" time="0.271" /><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload" time="0.228"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a59973b2e60&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    @pytest.mark.smoke
    def test_files_sign_url_for_upload(
        self, client, header, header_admin, project_fields, dataset_fields
    ):
    
&gt;       sign_url(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            file_signer_suffix,
            test_file_name,
        )

tests/test_file.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:519: in sign_url
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload_invalid_group" time="0.004"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload_invalid_bucket" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a59965348e0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_sign_url_for_upload_invalid_bucket(
        self, client, header, header_admin, project_fields, dataset_fields
    ):
    
&gt;       sign_url(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            file_signer_suffix,
            test_file_name,
            bucket="bucketdevel",
            expected_error="invalid bucket",
        )

tests/test_file.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:519: in sign_url
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload_invalid_dataset_not_exist" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5996029540&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_sign_url_for_upload_invalid_dataset_not_exist(
        self, client, header, header_admin, project_fields, dataset_fields
    ):
    
        dataset_id = str(uuid4())
    
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            dataset_id=dataset_id,
        )

tests/test_file.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload_invalid_dataset_owner" time="0.218"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a59965c5e10&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_4 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...IZLvECtHdyy__CH4B9jxAJVlSwuz6CEojiuPaUud2-I-maWo-DBQkpZzbj1mMg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_sign_url_for_upload_invalid_dataset_owner(
        self, client, header_4, header_admin, project_fields, dataset_fields
    ):
    
&gt;       sign_url(
            client,
            header_admin,
            header_4,
            project_fields,
            dataset_fields,
            file_signer_suffix,
            test_file_name,
            kc_group="3tr",
            expected_error="invalid data owner",
        )

tests/test_file.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:519: in sign_url
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_sign_url_for_upload_file_already_exists" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5996510370&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_files_sign_url_for_upload_file_already_exists(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
        project_id = str(uuid4())
        dataset_id = str(uuid4())
    
&gt;       upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=True,
        )

tests/test_file.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:282: in upload_file_complete
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_init_upload" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5995da0f10&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    @pytest.mark.smoke
    def test_files_init_upload(
        self, client, header_admin, header, dataset_fields, project_fields
    ):
    
        dataset_id = str(uuid4())
        project_id = str(uuid4())
    
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            dataset_id=dataset_id,
            project_id=project_id,
        )

tests/test_file.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_init_block_malicious_intent" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_file.TestFileUpload" name="test_files_init_upload_dataset_not_exist" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a59963ab9d0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_init_upload_dataset_not_exist(
        self, client, header_admin, header, project_fields, dataset_fields
    ):
        # create a dummy dataset
        # to make sure that the group is created
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
        )

tests/test_file.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_init_upload_required_field_is_missing" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a599643b700&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], file_fields = ['projectId', 'DatasetID', 'fileName', 'Comment']

    def test_files_init_upload_required_field_is_missing(
        self,
        client,
        header,
        header_admin,
        project_fields,
        dataset_fields,
        file_fields,
    ):
    
        err = "At least one required field is empty/unselected"
    
        for field in file_fields:
&gt;           start_file_upload(
                client,
                header_admin,
                header,
                project_fields,
                dataset_fields,
                file_upload_suffixes[0],
                test_file_name,
                expected_error=err,
                field_to_be_deleted=field,
            )

tests/test_file.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:579: in start_file_upload
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_init_field_cannot_be_empty" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a599690d150&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], file_fields = ['projectId', 'DatasetID', 'fileName', 'Comment']

    def test_files_init_field_cannot_be_empty(
        self,
        client,
        header,
        header_admin,
        project_fields,
        dataset_fields,
        file_fields,
    ):
        expected_err = "At least one required field is empty/unselected"
    
        for field in file_fields:
    
            if field == "Comment":
                continue
    
&gt;           start_file_upload(
                client,
                header_admin,
                header,
                project_fields,
                dataset_fields,
                file_upload_suffixes[0],
                test_file_name,
                expected_error=expected_err,
                overwrite_fields={field: ""},
            )

tests/test_file.py:332: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:579: in start_file_upload
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_upload_filename_w_spaces" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5996506590&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_upload_filename_w_spaces(
        self, client, header, header_admin, project_fields, dataset_fields
    ):
    
        file_name = "testfile 1.tsv"
    
&gt;       start_file_upload(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            file_upload_suffixes[0],
            file_name,
            expected_error=(f"file {file_name} contains spaces"),
        )

tests/test_file.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:579: in start_file_upload
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_upload_bad_file_extension" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5996555f90&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_files_upload_bad_file_extension(
        self, client, header, header_admin, project_fields, dataset_fields
    ):
    
        file_name = "testfile1.php"
    
&gt;       start_file_upload(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            file_upload_suffixes[0],
            file_name,
            expected_error=("forbidden file extension"),
        )

tests/test_file.py:367: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:579: in start_file_upload
    add_dataset(
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_finish_upload" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_file.TestFileUpload object at 0x7a5996504a30&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    @pytest.mark.smoke
    def test_files_finish_upload(
        self, client, header_admin, header, project_fields, dataset_fields
    ):
    
        dataset_id = str(uuid4())
        project_id = str(uuid4())
    
&gt;       add_dataset(
            client,
            header_admin,
            header,
            project_fields,
            dataset_fields,
            dataset_id=dataset_id,
            project_id=project_id,
        )

tests/test_file.py:386: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:406: in add_dataset
    add_project(
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...AzulYO_blMyaW6CexIe59kWgMO8TwEDk86drhMHrezmdp5Bswel1JiCu6ZbqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_finish_upload_wrong_group" time="0.235"><failure message="assert 404 == 405&#10; +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code">self = &lt;tests.test_file.TestFileUpload object at 0x7a599626a9e0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_files_finish_upload_wrong_group(
        self, client, header_2, view_query
    ):
    
        # dummy query to add the user's group to the db
        req_post(client, header_2, file_view_url_suffix, view_query)
    
        res = req_post(
            client,
            header_2,
            file_upload_suffixes[1],
            {"aws_key": test_aws_key},
        )
    
&gt;       assert res.status_code == 405
E       assert 404 == 405
E        +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code

tests/test_file.py:439: AssertionError</failure></testcase><testcase classname="test_file.TestFileUpload" name="test_files_finish_upload_group_not_exist" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_file.TestFileUpload" name="test_files_finish_upload_dataset_not_exist" time="0.019" /><testcase classname="test_file.TestFileUpload" name="test_files_finish_upload_file_not_exist" time="0.045" /><testcase classname="test_file.TestFileView" name="test_file_get_cols" time="0.006"><failure message="AssertionError: assert 10 == 11&#10; +  where 11 = len([{'key': 'id', 'label': 'File ID'}, {'key': 'project_id', 'label': 'Project ID'}, {'key': 'dataset_id', 'label': 'Data...abel': 'File Name'}, {'key': 'version', 'label': 'File Version'}, {'key': 'submitter_name', 'label': 'Submitter'}, ...])">self = &lt;tests.test_file.TestFileView object at 0x7a59963f4fd0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}

    def test_file_get_cols(self, client, header_admin):
    
        res = req_get(client, header_admin, "files/viewcols")
        response = json.loads(res.data.decode("utf8"))
    
        assert "headers" in response[0]
&gt;       assert 10 == len(response[0]["headers"])
E       AssertionError: assert 10 == 11
E        +  where 11 = len([{'key': 'id', 'label': 'File ID'}, {'key': 'project_id', 'label': 'Project ID'}, {'key': 'dataset_id', 'label': 'Data...abel': 'File Name'}, {'key': 'version', 'label': 'File Version'}, {'key': 'submitter_name', 'label': 'Submitter'}, ...])

tests/test_file.py:512: AssertionError</failure></testcase><testcase classname="test_file.TestFileView" name="test_files_view_unfinished_uploads" time="0.067" /><testcase classname="test_file.TestFileView" name="test_files_view" time="0.086" /><testcase classname="test_file.TestFileView" name="test_files_version_increased" time="0.117" /><testcase classname="test_file.TestFileView" name="test_files_filter_by_dataset_id" time="0.082" /><testcase classname="test_file.TestFileView" name="test_files_filter_by_project_id" time="0.086" /><testcase classname="test_file.TestFileView" name="test_files_filter_by_not_existing_project_id" time="0.080" /><testcase classname="test_file.TestFileView" name="test_files_filter_by_dataset_id_and_file_version" time="0.135" /><testcase classname="test_file.TestFileView" name="test_file_sort_by_dataset_id" time="0.071" /><testcase classname="test_file.TestFileShare" name="test_dataset_share_with_one_group" time="0.084"><failure message="assert 0 == 1">self = &lt;tests.test_file.TestFileShare object at 0x7a59963ad180&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_dataset_share_with_one_group(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
    
        test = ["cnag"]
    
        dataset_id = str(uuid4())
        project_id = str(uuid4())
    
        file_id = upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=True,
        )[0]
    
        # group 2 file view before sharing
        res = filter_view(
            client,
            header_2,
            file_view_url_suffix,
            [{"id": "id", "value": str(file_id)}],
        )
        response = json.loads(res.data.decode("utf8"))
&gt;       assert 0 == response["_meta"]["total_items"]
E       assert 0 == 1

tests/test_file.py:865: AssertionError</failure></testcase><testcase classname="test_file.TestFileShare" name="test_dataset_unshare_with_one_group[True]" time="0.077"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_file.TestFileShare object at 0x7a59963f7f10&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}, tester = &lt;utils.MyTester object at 0x7a59963f4700&gt;
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    @pytest.mark.parametrize("tester", [True], indirect=["tester"])
    def test_dataset_unshare_with_one_group(
        self,
        client,
        header_admin,
        header,
        view_query,
        tester,
        dataset_fields,
        project_fields,
    ):
    
        test = ["cnag"]
    
        project_id = str(uuid4())
        dataset_id = str(uuid4())
    
        file_id = upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=True,
        )[0]
    
        # then share the dataset it with one group
        res = req_put(
            client,
            header,
            dataset_add_group_url_suffix,
            [
                f"project={project_id}",
                f"dataset={dataset_id}",
                f"group={test[0]}",
            ],
        )
&gt;       response = json.loads(res.data.decode("utf8"))
E       AttributeError: 'dict' object has no attribute 'data'

tests/test_file.py:931: AttributeError</failure></testcase><testcase classname="test_file.TestFileShare" name="test_dataset_share_with_all_groups" time="0.106" /><testcase classname="test_file.TestFileShare" name="test_dataset_unshare_with_all_groups[True]" time="0.136" /><testcase classname="test_file.TestFileDownload" name="test_files_generate_download_url_ds_owner" time="0.171" /><testcase classname="test_file.TestFileDownload" name="test_files_generate_download_url_ds_wrong_group" time="0.097"><failure message="assert 0 == 1">self = &lt;tests.test_file.TestFileDownload object at 0x7a59967a6fb0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_files_generate_download_url_ds_wrong_group(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
    
        project_id = str(uuid4())
        dataset_id = str(uuid4())
    
        file_id = upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=True,
        )[0]
    
        # group 1 file view
        res = filter_view(
            client,
            header,
            file_view_url_suffix,
            [{"id": "id", "value": str(file_id)}],
        )
        response = json.loads(res.data.decode("utf8"))
        assert file_id == response["items"][0]["id"]
    
        # group2 file view
        res = filter_view(
            client,
            header_2,
            file_view_url_suffix,
            [{"id": "id", "value": str(file_id)}],
        )
        response = json.loads(res.data.decode("utf8"))
&gt;       assert 0 == response["_meta"]["total_items"]
E       assert 0 == 1

tests/test_file.py:1164: AssertionError</failure></testcase><testcase classname="test_file.TestFileDownload" name="test_files_generate_download_url_ds_shared_w_one_group" time="0.083"><failure message="assert 0 == 1">self = &lt;tests.test_file.TestFileDownload object at 0x7a599692b4f0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_files_generate_download_url_ds_shared_w_one_group(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
        test = ["cnag"]
    
        dataset_id = str(uuid4())
        project_id = str(uuid4())
    
        file_id = upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=True,
        )[0]
    
        # group 2 file view before sharing
        res = filter_view(
            client,
            header_2,
            file_view_url_suffix,
            [{"id": "id", "value": str(file_id)}],
        )
        response = json.loads(res.data.decode("utf8"))
&gt;       assert 0 == response["_meta"]["total_items"]
E       assert 0 == 1

tests/test_file.py:1211: AssertionError</failure></testcase><testcase classname="test_file.TestFileDownload" name="test_files_generate_download_url_ds_shared_w_all" time="0.085" /><testcase classname="test_file.TestFileDownload" name="test_file_download_block_malicious_intent" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_file.TestFileDownload" name="test_file_dl_not_allowed" time="0.100"><failure message="AssertionError: assert 'download forbidden' == 'http://local...15cbce7f211ae'&#10;  - http://localhost:9000/bucketdevel3tropal/3tr/4364ef0f-7e37-4fac-8654-bd419dfbaa67/testfile1.tsv_uploadedVersion_1.tsv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=3Xpz7Gwps5kRWuwaMAOS%2F20241212%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20241212T185600Z&amp;X-Amz-Expires=3600&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=588b07e783b8347fcaa51cdd487f275663626c2ea565be7d47e15cbce7f211ae&#10;  + download forbidden">self = &lt;tests.test_file.TestFileDownload object at 0x7a599688bca0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_file_dl_not_allowed(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
    
        project_id = str(uuid4())
        dataset_id = str(uuid4())
    
        file_id = upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
            dataset_private=False,
            file_dl_allowed=False,
        )[0]
    
        # filter view
        res = filter_view(
            client,
            header_2,
            file_view_url_suffix,
            [{"id": "id", "value": str(file_id)}],
        )
        response = json.loads(res.data.decode("utf8"))
        assert response["_meta"]["total_items"] == 1
    
        file_id = response["items"][0]["id"]
        assert isinstance(file_id, int)
    
        file_ids = [str(file_id)]
    
        # try to download the file with a user
        # which should not be allowed to download the file
        res = req_post(
            client,
            header_2,
            file_download_suffix,
            {"file_ids": file_ids},
        )
    
        response = json.loads(res.data.decode("utf8"))
    
        assert "returned presigned urls" in response["message"]
&gt;       assert "download forbidden" == response["presignedUrls"][str(file_id)]
E       AssertionError: assert 'download forbidden' == 'http://local...15cbce7f211ae'
E         - http://localhost:9000/bucketdevel3tropal/3tr/4364ef0f-7e37-4fac-8654-bd419dfbaa67/testfile1.tsv_uploadedVersion_1.tsv?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=3Xpz7Gwps5kRWuwaMAOS%2F20241212%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20241212T185600Z&amp;X-Amz-Expires=3600&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=588b07e783b8347fcaa51cdd487f275663626c2ea565be7d47e15cbce7f211ae
E         + download forbidden

tests/test_file.py:1387: AssertionError</failure></testcase><testcase classname="test_file.TestFileDownload" name="test_file_dl_allowed_false_but_user_in_group" time="0.096" /><testcase classname="test_file.TestFileDisable" name="test_file_disable_files" time="0.103" /><testcase classname="test_file.TestFileDisable" name="test_file_disable_file_wrong_schema" time="0.094" /><testcase classname="test_file.TestFileDisable" name="test_file_disable_file_user_is_not_owner_of_all_file_ids" time="0.097"><failure message="AttributeError: 'dict' object has no attribute 'data'">self = &lt;tests.test_file.TestFileDisable object at 0x7a59961fdba0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_2 = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_file_disable_file_user_is_not_owner_of_all_file_ids(
        self,
        client,
        header_admin,
        header,
        header_2,
        dataset_fields,
        project_fields,
    ):
        dataset_id = str(uuid4())
    
        file_ids = []
        for head, group in [(header, "3tr"), (header_2, "cnag")]:
            project_id = str(uuid4())
    
&gt;           file_id = upload_file_complete(
                client,
                header_admin,
                head,
                project_id,
                dataset_id,
                project_fields,
                dataset_fields,
                test_file_name,
                dataset_private=True,
                group=group,
            )[0]

tests/test_file.py:1571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:282: in upload_file_complete
    add_dataset(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Lmh1DIGiUPUpk4uP27MJlsH_4pcSsgp7QrB_T67JVNo10nbmuz08bEgnraPJdg', 'Content-Type': 'application/json', 'groups': ['3tr']}
proj_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
ds_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...], dataset_id = '01ec86ec-1e23-4b56-b6a8-349ad90b1d33'
project_id = 'a35346e4-aeb5-4d94-96cb-a930fc0c1533', private = True, submit = True, overwrite_fields = None, create_project = True
proj_overwrite_fields = None, expected_error = None, add_to_db = True, field_to_be_deleted = None

    def add_dataset(
        client,
        header_admin,
        header,
        proj_fields,
        ds_fields,
        dataset_id=None,
        project_id=None,
        private=True,
        submit=True,
        overwrite_fields=None,
        create_project=True,
        proj_overwrite_fields=None,
        expected_error=None,
        add_to_db=True,
        field_to_be_deleted=None,
    ):
        """
        Before being able to create a dataset
        a project has to be created
        """
    
        if project_id is None:
            project_id = str(uuid.uuid4())
    
        # TODO
        # pass owner information to add_project
    
        if create_project:
            add_project(
                client,
                header_admin,
                project_id,
                proj_fields,
                "projects/create",
                submit=True,
                overwrite_fields=proj_overwrite_fields,
            )
    
        if dataset_id is None:
            dataset_id = str(uuid.uuid4())
    
        d = {"disease": "CD", "visibility": "private"}
    
        row = {k: d.get(k, "test") for k in ds_fields}
        row.update(
            {
                "project_id": project_id,
                "id": dataset_id,
                "samplesCount": "1",
                "featuresCount": "1",
                # TODO
                # fix wrong spelling
                "healthyControllsIncluded": True,
                "visibility": "private" if private else "visible to all",
                "file": [],
                "file2": [],
            }
        )
    
        if field_to_be_deleted is not None:
            del row[field_to_be_deleted]
    
        if overwrite_fields:
            row.update(overwrite_fields)
    
        if not submit:
            return row
    
        url = "datasets/create"
    
        if add_to_db is False:
            url = "datasets/validate"
            row = [row]
    
        # TODO
        # in a function
        # because it is the same logic for
        # add_project and add_file
        res = req_post(
            client,
            header,
            url,
            row,
        )
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
                assert expected_error in res["message"]
                return
            except AssertionError:
                raise AssertionError(res["message"])
    
        try:
&gt;           response = json.loads(res.data.decode("utf8"))
E           AttributeError: 'dict' object has no attribute 'data'

tests/helpers/utils.py:476: AttributeError</failure></testcase><testcase classname="test_file.TestFileDisable" name="test_file_disable_file_block_malicious_intent" time="0.000"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_file.TestFileAdminView" name="test_file_admin_view_user_not_admin" time="0.006" /><testcase classname="test_file.TestFileAdminView" name="test_file_admin_view" time="0.136" /><testcase classname="test_file.TestFileAdminView" name="test_file_admin_view_filter_by_file_id" time="0.084" /><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_get_cols" time="0.004"><failure message="KeyError: 0">self = &lt;tests.test_file.TestFileAdminMode object at 0x7a59963ae7d0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}

    def test_file_admin_get_cols(self, client, header_admin):
    
        # TODO
        # figure out why that is a post request
        res = req_post(client, header_admin, "files/adminviewcols", {})
        response = json.loads(res.data.decode("utf8"))
    
&gt;       assert "headers" in response[0]
E       KeyError: 0

tests/test_file.py:1782: KeyError</failure></testcase><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_mode_user_not_admin" time="0.005" /><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_mode" time="0.142"><failure message="IndexError: list index out of range">self = &lt;tests.test_file.TestFileAdminMode object at 0x7a59963ad240&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...bqUthzwepdGS52IeLIQGCBeS1wjJ8GHNWP1S82d0CX6-jQKEeeFJh_BDICFA', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Q-i2J7XJtIbQlJtZVGH1wqqtiIIDGGKv7HFQT61ZQbrpf-f4_gyAY_hfmtX2tg', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
dataset_fields = ['id', 'project_id', 'name', 'disease', 'treatment', 'molecularInfo', ...]

    def test_file_admin_mode(
        self, client, header_admin, header, project_fields, dataset_fields
    ):
        project_id = str(uuid4())
        dataset_id = str(uuid4())
    
        upload_file_complete(
            client,
            header_admin,
            header,
            project_id,
            dataset_id,
            project_fields,
            dataset_fields,
            test_file_name,
        )
    
        res = filter_view(
            client,
            header,
            file_view_url_suffix,
            [{"id": "id", "value": "1"}],
        )
    
        response = json.loads(res.data.decode("utf8"))
&gt;       assert response["items"][0]["comment"] == "test"
E       IndexError: list index out of range

tests/test_file.py:1817: IndexError</failure></testcase><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_mode_file_not_found" time="0.009" /><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_mode_wrong_schema_file_is_not_an_array" time="0.008" /><testcase classname="test_file.TestFileAdminMode" name="test_file_admin_mode_wrong_schema_field_not_allowed" time="0.034" /><testcase classname="test_health.TestHealthClass" name="test_curl" time="0.078" /><testcase classname="test_project.TestProjectCreate" name="test_get_project_submission_cols" time="0.270" /><testcase classname="test_project.TestProjectCreate" name="test_datasets_admin_get_cols_not_admin" time="0.218" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a599626be50&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_projects_create(self, client, header_admin, project_fields):
    
        project_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_projects_duplicate_ids" time="0.007" /><testcase classname="test_project.TestProjectCreate" name="test_project_already_exist" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a59967ce9b0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_project_already_exist(self, client, header_admin, project_fields):
    
        project_id = str(uuid.uuid4())
    
        for error in [None, "project_id already exists"]:
&gt;           add_project(
                client,
                header_admin,
                project_id,
                project_fields,
                projects_create_url_suffix,
                expected_error=error,
            )

tests/test_project.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_project_kc_group_not_valid" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a5996358f40&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_project_kc_group_not_valid(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
            overwrite_fields={"owners": "ownerX"},
            expected_error="ownerX is not a valid group",
        )

tests/test_project.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_project_user_is_not_in_admin_group" time="0.005" /><testcase classname="test_project.TestProjectCreate" name="test_project_multiple_owner_groups" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a59964e8370&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_project_multiple_owner_groups(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
            overwrite_fields={"owners": "3tr,cnag"},
        )

tests/test_project.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_project_all_kc_groups_are_owner" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a59963f5fc0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_project_all_kc_groups_are_owner(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
            overwrite_fields={"owners": "ALL"},
        )

tests/test_project.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:117: in create_project
    proj_owners = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_projects_payload_not_a_list" time="0.016" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create_wrong_fields" time="0.012" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create_id_empty" time="0.007" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create_missing_field" time="0.094" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create_field_is_empty" time="0.010"><failure message="AssertionError: '' should be non-empty">client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_id = '5f404a41-bf14-480c-b9e0-6e2e293ec2dc'
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
projects_create_url_suffix = 'projects/create', submit = True, overwrite_fields = {'owners': ''}
expected_error = 'At least one required field is empty/unselected', field_to_be_deleted = None

    def add_project(
        client,
        header,
        project_id,
        project_fields,
        projects_create_url_suffix,
        submit=True,
        overwrite_fields=None,
        expected_error=None,
        field_to_be_deleted=None,
    ):
        """test
        only works with a user which is in the admin group
        """
        # projects_create_url_suffix = "projects/create"
    
        project = {}
        for key, data_type in project_fields:
            val = "test"
            if data_type == "list(str)":
                val = "test"
                # val = "test,test2"
    
            elif data_type == "bool":
                val = True
    
            if key == "datasetVisibilityDefault":
                val = "private"
            project[key] = val
    
        project.update(
            {
                "id": project_id,
                "owners": "3tr",
                "logoUrl": "",
                "diseases": "COPD,ASTHMA,CD,UC,MS,SLE,RA",
            }
        )
    
        project = {key: project[key] for key, _ in project_fields}
    
        if field_to_be_deleted:
            del project[field_to_be_deleted]
    
        if overwrite_fields:
            project.update(overwrite_fields)
    
        if not submit:
            return project
    
        # TODO
        # logic below in a function
        # because it is the same for add_dataset and add_file
        res = req_post(client, header, projects_create_url_suffix, [project])
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
&gt;               assert expected_error in res["message"]
E               AssertionError

tests/helpers/utils.py:212: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_project.TestProjectCreate object at 0x7a599639ceb0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_projects_create_field_is_empty(
        self, client, header_admin, project_fields
    ):
        expected_err = "At least one required field is empty/unselected"
    
        non_mandatory_fields = ["name", "description", "logoUrl"]
    
        for field, data_type in project_fields:
            proj_id = str(uuid.uuid4())
    
            if data_type == "bool":
                continue
    
            if field == "id" or field in non_mandatory_fields:
                continue
    
&gt;           add_project(
                client,
                header_admin,
                proj_id,
                project_fields,
                projects_create_url_suffix,
                expected_error=expected_err,
                overwrite_fields={field: ""},
            )

tests/test_project.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_id = '5f404a41-bf14-480c-b9e0-6e2e293ec2dc'
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
projects_create_url_suffix = 'projects/create', submit = True, overwrite_fields = {'owners': ''}
expected_error = 'At least one required field is empty/unselected', field_to_be_deleted = None

    def add_project(
        client,
        header,
        project_id,
        project_fields,
        projects_create_url_suffix,
        submit=True,
        overwrite_fields=None,
        expected_error=None,
        field_to_be_deleted=None,
    ):
        """test
        only works with a user which is in the admin group
        """
        # projects_create_url_suffix = "projects/create"
    
        project = {}
        for key, data_type in project_fields:
            val = "test"
            if data_type == "list(str)":
                val = "test"
                # val = "test,test2"
    
            elif data_type == "bool":
                val = True
    
            if key == "datasetVisibilityDefault":
                val = "private"
            project[key] = val
    
        project.update(
            {
                "id": project_id,
                "owners": "3tr",
                "logoUrl": "",
                "diseases": "COPD,ASTHMA,CD,UC,MS,SLE,RA",
            }
        )
    
        project = {key: project[key] for key, _ in project_fields}
    
        if field_to_be_deleted:
            del project[field_to_be_deleted]
    
        if overwrite_fields:
            project.update(overwrite_fields)
    
        if not submit:
            return project
    
        # TODO
        # logic below in a function
        # because it is the same for add_dataset and add_file
        res = req_post(client, header, projects_create_url_suffix, [project])
    
        if expected_error:
            try:
                res = json.loads(res.data.decode("utf8"))
            except Exception:
                pass
    
            try:
                assert expected_error in res["message"]
            except AssertionError:
&gt;               raise AssertionError(res["message"])
E               AssertionError: '' should be non-empty

tests/helpers/utils.py:214: AssertionError</failure></testcase><testcase classname="test_project.TestProjectCreate" name="test_projects_create_logoUrl_wrong_format" time="0.012" /><testcase classname="test_project.TestProjectCreate" name="test_projects_create_wrong_enums" time="0.012" /><testcase classname="test_project.TestProjectCreate" name="test_project_create_validate_success" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectCreate object at 0x7a5996525c00&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_project_create_validate_success(
        self, client, header_admin, project_fields
    ):
    
        # scenario: validate that the project can be created
        # this will not add it to the db
    
        project_id = str(uuid.uuid4())
    
&gt;       res = add_project(
            client,
            header_admin,
            project_id,
            project_fields,
            project_validate_create_url_suffix,
        )

tests/test_project.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/apis/project.py:78: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectList" name="test_projects_list" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectList object at 0x7a59968cc490&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...o6yy1RelWcVyPGMo8kk8Qww6IYQvcn-2MdI8RHP3TX454lqUI-TFelUqzqycUw', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_projects_list(
        self, client, header, header_admin, project_fields, view_query
    ):
    
        for _ in range(2):
            proj_id = str(uuid.uuid4())
&gt;           add_project(
                client,
                header_admin,
                proj_id,
                project_fields,
                projects_create_url_suffix,
            )

tests/test_project.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectList" name="test_project_list_group_not_exist" time="0.004"><error message="failed on setup with &quot;KeyError: 'access_token'&quot;">@pytest.fixture(scope="module")
    def header_5():
&gt;       return get_header("test5", DevelopmentConfig)

tests/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:141: in get_header
    token = get_token(user, cfg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

user = 'test5', cfg = &lt;class 'server.config.config_test.DevelopmentConfig'&gt;

    def get_token(user, cfg):
        payload = (
            f"client_id={cfg.CLIENT}&amp;grant_type=password&amp;"
            f"username={user}&amp;password={cfg.PASSWORD}"
        )
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(  # nosec (don't need to verify on localhost)
            cfg.TOKEN_URL, data=payload, headers=headers, verify=False
        )
&gt;       return response.json()["access_token"]
E       KeyError: 'access_token'

tests/helpers/utils.py:116: KeyError</error></testcase><testcase classname="test_project.TestProjectView" name="test_datasets_admin_get_cols" time="0.014"><failure message="KeyError: 0">self = &lt;tests.test_project.TestProjectView object at 0x7a59965250c0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}

    def test_datasets_admin_get_cols(self, client, header_admin):
    
        # TODO
        # figure out why that is a post request
        res = req_post(client, header_admin, "projects/adminviewcols", {})
        response = json.loads(res.data.decode("utf8"))
    
&gt;       assert "headers" in response[0]
E       KeyError: 0

tests/test_project.py:372: KeyError</failure></testcase><testcase classname="test_project.TestProjectView" name="test_datasets_admin_get_cols_not_admin" time="0.005"><failure message="AssertionError: assert 'Only admin u... the projects' == 'The method i...equested URL.'&#10;  - The method is not allowed for the requested URL.&#10;  + Only admin users can view the projects">self = &lt;tests.test_project.TestProjectView object at 0x7a5996451210&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...o6yy1RelWcVyPGMo8kk8Qww6IYQvcn-2MdI8RHP3TX454lqUI-TFelUqzqycUw', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_datasets_admin_get_cols_not_admin(self, client, header):
    
        # TODO
        # figure out why that is a post request
        res = req_post(client, header, "projects/adminviewcols", {})
        response = json.loads(res.data.decode("utf8"))
    
&gt;       assert "Only admin users can view the projects" == response["message"]
E       AssertionError: assert 'Only admin u... the projects' == 'The method i...equested URL.'
E         - The method is not allowed for the requested URL.
E         + Only admin users can view the projects

tests/test_project.py:382: AssertionError</failure></testcase><testcase classname="test_project.TestProjectView" name="test_view_projects" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectView object at 0x7a599675f1f0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_view_projects(
        self, client, header_admin, project_fields, view_query
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectView" name="test_view_projects_extra_cols_null" time="0.000" /><testcase classname="test_project.TestProjectView" name="test_view_projects_no_admin" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectView object at 0x7a5996857b20&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...o6yy1RelWcVyPGMo8kk8Qww6IYQvcn-2MdI8RHP3TX454lqUI-TFelUqzqycUw', 'Content-Type': 'application/json', 'groups': ['3tr']}
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_view_projects_no_admin(
        self, client, header, header_admin, project_fields, view_query
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:454: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectView" name="test_view_projects_filter_by_proj_id" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectView object at 0x7a59962692a0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
view_query = {'filtered': None, 'page': 1, 'pageSize': 100, 'sorted': None}

    def test_view_projects_filter_by_proj_id(
        self, client, header_admin, project_fields, view_query
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:473: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59962f96f0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project(self, client, header_admin, project_fields):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:526: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_no_admin" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a5996197d90&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...o6yy1RelWcVyPGMo8kk8Qww6IYQvcn-2MdI8RHP3TX454lqUI-TFelUqzqycUw', 'Content-Type': 'application/json', 'groups': ['3tr']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_no_admin(
        self, client, header_admin, header, project_fields
    ):
    
        # TODO
        # this test cannot pass yet because the project view is missing
        # the functionality to be filtered by project_id
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_col_cannot_be_modified" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59961d8130&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_col_cannot_be_modified(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_not_exist" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a599644ca60&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_not_exist(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:629: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_new_url" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59964cff40&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_new_url(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:655: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_new_url_wrong_format" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59961fe110&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_new_url_wrong_format(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_change_owner" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59966a8d90&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_change_owner(
        self, client, header_admin, project_fields
    ):
    
        # scenario:
        # change the owner of a project
        # whereby the owner (=kc_groupname) is already in the group database
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_new_owner" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59961ff790&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_new_owner(
        self, client, header_admin, project_fields
    ):
    
        # note:
        # the definition of a new owner is a kc_groupname
        # that is not yet in the database
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:784: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_multiple_owners" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a599618b760&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_multiple_owners(
        self, client, header_admin, project_fields
    ):
    
        # sceanario:
        # one owner is new (not in the group database)
        # and one owner is already in the group database
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:833: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_owner_invalid" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59961e6f20&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_owner_invalid(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:879: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_owner_valid" time="0.001"><failure message="sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM public.group ...' should be explicitly declared as text('DELETE FROM public.group ...')">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a5996855660&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]
db_uri = 'postgresql://postgres:password@10.10.0.2/postgres'

    def test_modify_project_owner_valid(
        self, client, header_admin, project_fields, db_uri
    ):
    
        # test only works if group5 is not in the database
        cmd = "DELETE FROM public.group WHERE kc_groupname='group5'"
&gt;       del_from_db(db_uri, cmd)

tests/test_project.py:911: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:103: in del_from_db
    session.execute(cmd)
venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2362: in execute
    return self._execute_internal(
venv/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2145: in _execute_internal
    statement = coercions.expect(roles.StatementRole, statement)
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:395: in expect
    resolved = impl._literal_coercion(
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:621: in _literal_coercion
    return self._text_coercion(element, argname, **kw)
venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:614: in _text_coercion
    return _no_text_coercion(element, argname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

element = "DELETE FROM public.group WHERE kc_groupname='group5'", argname = None, exc_cls = &lt;class 'sqlalchemy.exc.ArgumentError'&gt;, extra = None, err = None

    def _no_text_coercion(
        element: Any,
        argname: Optional[str] = None,
        exc_cls: Type[exc.SQLAlchemyError] = exc.ArgumentError,
        extra: Optional[str] = None,
        err: Optional[Exception] = None,
    ) -&gt; NoReturn:
&gt;       raise exc_cls(
            "%(extra)sTextual SQL expression %(expr)r %(argname)sshould be "
            "explicitly declared as text(%(expr)r)"
            % {
                "expr": util.ellipses_string(element),
                "argname": "for argument %s" % (argname,) if argname else "",
                "extra": "%s " % extra if extra else "",
            }
        ) from err
E       sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM public.group ...' should be explicitly declared as text('DELETE FROM public.group ...')

venv/lib/python3.10/site-packages/sqlalchemy/sql/coercions.py:584: ArgumentError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_owner_group_already_exist" time="0.014"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a5996359270&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_owner_group_already_exist(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_new_name" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59964c1fc0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_new_name(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:979: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_dataset_visibility_changeable" time="0.013"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a599675d630&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_dataset_visibility_changeable(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:1024: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_dataset_visibility_changeable_wrong_format" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59964c17b0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_dataset_visibility_changeable_wrong_format(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:1073: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_dataset_visibility_default" time="0.012"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a5995f261d0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_dataset_visibility_default(
        self, client, header_admin, project_fields
    ):
    
        field = "dataset_visibility_default"
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:1106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_project.TestProjectAdminMode" name="test_modify_project_dataset_visibility_default_wrong_enum" time="0.045"><failure message="ValueError: list.remove(x): x not in list">self = &lt;tests.test_project.TestProjectAdminMode object at 0x7a59962a6bc0&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header_admin = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...FPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q', 'Content-Type': 'application/json', 'groups': ['admin']}
project_fields = [('id', 'str'), ('name', 'str'), ('description', 'str'), ('owners', 'list(str)'), ('datasetVisibilityDefault', 'str'), ('datasetVisibilityChangeable', 'bool'), ...]

    def test_modify_project_dataset_visibility_default_wrong_enum(
        self, client, header_admin, project_fields
    ):
    
        proj_id = str(uuid.uuid4())
    
&gt;       add_project(
            client,
            header_admin,
            proj_id,
            project_fields,
            projects_create_url_suffix,
        )

tests/test_project.py:1155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/helpers/utils.py:203: in add_project
    res = req_post(client, header, projects_create_url_suffix, [project])
tests/helpers/utils.py:30: in inner_function
    res = func(*args, **kwargs)
tests/helpers/utils.py:46: in req_post
    return client.post(
venv/lib/python3.10/site-packages/werkzeug/test.py:1165: in post
    return self.open(*args, **kw)
venv/lib/python3.10/site-packages/flask/testing.py:235: in open
    response = super().open(
venv/lib/python3.10/site-packages/werkzeug/test.py:1114: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:986: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.10/site-packages/werkzeug/test.py:1262: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1488: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.10/site-packages/flask/app.py:1466: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:1463: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:872: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.10/site-packages/flask_cors/extension.py:165: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv/lib/python3.10/site-packages/flask_restx/api.py:671: in error_router
    return original_handler(f)
venv/lib/python3.10/site-packages/flask_restx/api.py:669: in error_router
    return self.handle_error(e)
venv/lib/python3.10/site-packages/flask/app.py:870: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.10/site-packages/flask/app.py:855: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_cors/decorator.py:128: in wrapped_function
    resp = make_response(f(*args, **kwargs))
venv/lib/python3.10/site-packages/flask_restx/api.py:402: in wrapper
    resp = resource(*args, **kwargs)
venv/lib/python3.10/site-packages/flask/views.py:110: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]
venv/lib/python3.10/site-packages/flask_restx/resource.py:41: in dispatch_request
    resp = meth(*args, **kwargs)
server/security.py:49: in decorated_function
    return func(token=token, *args, **kwargs)
server/security.py:115: in decorated_function
    return func(userid=userid, groups=groups, *args, **kwargs)
server/apis/project.py:181: in post
    response, status_code = react_create_builder(
server/factories/create_factory.py:413: in react_create_builder
    success = create_project(
server/factories/create_factory.py:127: in create_project
    if is_valid_kc_group(group_name, token) is False:
server/utils/permissions.py:56: in is_valid_kc_group
    groups = get_all_kc_groups(token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

token = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19UNWhXOHlJIn0.eyJle...zvd1wo7IxO6ut1v_x0qLc2PBLTuYA2PxYjJSF6KPiWnj-Kvss7L2oYBALcFPE2sJ-SR4GZQDvKueUuDwiRZS_j6rIVIBL8BtKmKD7X6dvhT-jmAUgrmb4Q'

    def get_all_kc_groups(token):
        """
        Get all groups from keycloak
        and check if the group is in the list
        """
        url = f"{cfg['AUTH_BASE_URL']}/admin/realms/{cfg['AUTH_REALM']}/groups"
        headers = {"Authorization": f"Bearer {token}"}
    
        try:
            response = requests.get(  # nosec (for now, should be changed)
                url, headers=headers, verify=False, timeout=10
            )
        except Timeout:
            print("Timeout has been raised.")
    
        # TODO
        # return the error message that the user is not configured
        # correctly. Please contact the keycloak adminstrators to resolve this
    
        # if response.status_code == 403:
        #     raise ServiceUnavailable("Service unavailable")
    
        if response.status_code != 200:
            print("url", url)
            print("headers", headers)
            raise ServiceUnavailable(
                "Keycloak",
                response.text,
                response.reason,
                status_code=response.status_code,
            )
    
        # * if it returns unknown error the admin user is not configured correctly
        # asign the following role to the admin user
        # realm-management -&gt; query-groups
    
        groups = [res["name"] for res in response.json()]
&gt;       groups.remove("admin")
E       ValueError: list.remove(x): x not in list

server/utils/permissions.py:47: ValueError</failure></testcase><testcase classname="test_template.TestTemplateClass" name="test_template_project" time="0.272" /><testcase classname="test_template.TestTemplateClass" name="test_template_project_not_admin" time="0.218" /><testcase classname="test_template.TestTemplateClass" name="test_template_dataset" time="0.005" /><testcase classname="test_template.TestTemplateClass" name="test_template_file" time="0.006" /><testcase classname="test_template.TestTemplateClass" name="test_template_arg_not_allowed" time="0.006" /><testcase classname="test_template.TestTemplateClass" name="test_template_post_not_allowed" time="0.005"><failure message="assert 405 == 404&#10; +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code">self = &lt;tests.test_template.TestTemplateClass object at 0x7a59964ea020&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Rz4Tsk_S5znGrvp6_034SPSPfATzhqyQBrCQgIpGdrDUDO41OHJblz06bVqguA', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_template_post_not_allowed(self, client, header):
    
        res = req_post(
            client,
            header,
            "template",
            {"id": "test"},
        )
&gt;       assert 405 == res.status_code
E       assert 405 == 404
E        +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code

tests/test_template.py:102: AssertionError</failure></testcase><testcase classname="test_template.TestTemplateClass" name="test_template_put_not_allowed" time="0.006"><failure message="assert 405 == 404&#10; +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code">self = &lt;tests.test_template.TestTemplateClass object at 0x7a5996359930&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Rz4Tsk_S5znGrvp6_034SPSPfATzhqyQBrCQgIpGdrDUDO41OHJblz06bVqguA', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_template_put_not_allowed(self, client, header):
    
        res = req_put(
            client,
            header,
            "template?arg",
            ["dataset=test", "group=test"],
        )
    
&gt;       assert 405 == res.status_code
E       assert 405 == 404
E        +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code

tests/test_template.py:114: AssertionError</failure></testcase><testcase classname="test_template.TestTemplateClass" name="test_template_del_not_allowed" time="0.032"><failure message="assert 405 == 404&#10; +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code">self = &lt;tests.test_template.TestTemplateClass object at 0x7a59964ea590&gt;, client = &lt;FlaskClient &lt;Flask 'server.app'&gt;&gt;
header = {'Authorization': 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRUGRBRE9LdzlFVk1hTFFLOGwydFZWcW1WYmhSd1l0WFhhZ19...Rz4Tsk_S5znGrvp6_034SPSPfATzhqyQBrCQgIpGdrDUDO41OHJblz06bVqguA', 'Content-Type': 'application/json', 'groups': ['3tr']}

    def test_template_del_not_allowed(self, client, header):
    
        res = req_del(
            client,
            header,
            "template",
            {"id": "test"},
        )
&gt;       assert 405 == res.status_code
E       assert 405 == 404
E        +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code

tests/test_template.py:125: AssertionError</failure></testcase></testsuite></testsuites>